<!DOCTYPE html>
<html>
<head>
  <title>Browser Interface</title>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: Arial, sans-serif;
      background: #f0f0f0;
      height: 100vh;
      display: flex;
      flex-direction: column;
    }
    #browser {
      background: white;
      margin: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    #toolbar {
      padding: 10px;
      background: #f8f9fa;
      border-bottom: 1px solid #ddd;
      display: flex;
      gap: 10px;
    }
    #controls {
      display: flex;
      gap: 5px;
    }
    .control-btn {
      background: none;
      border: none;
      padding: 5px;
      cursor: pointer;
      border-radius: 4px;
    }
    .control-btn:hover {
      background: #e9ecef;
    }
    #url-bar {
      flex: 1;
      display: flex;
      gap: 5px;
    }
    #url-input {
      flex: 1;
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 20px;
      outline: none;
    }
    #tabs-bar {
      display: flex;
      background: #f8f9fa;
      padding: 5px 10px 0;
      border-bottom: 1px solid #ddd;
    }
    #tabs-container {
      display: flex;
      flex: 1;
      gap: 5px;
      overflow-x: auto;
      max-width: calc(100% - 40px);
    }
    .tab {
      display: flex;
      align-items: center;
      gap: 5px;
      padding: 8px 15px;
      background: #e9ecef;
      border: 1px solid #ddd;
      border-bottom: none;
      border-radius: 8px 8px 0 0;
      cursor: pointer;
      min-width: 100px;
    }
    .tab.active {
      background: white;
    }
    #content-container {
      flex: 1;
      position: relative;
      overflow: hidden;
    }
    .content {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: none;
    }
    .content.active {
      display: block;
    }
    embed {
      width: 100%;
      height: 100%;
      border: none;
    }
  </style>
</head>
<body>
  <div id="browser">
    <div id="toolbar">
      <div id="controls">
        <button id="back" class="control-btn">&#9664;</button>
        <button id="forward" class="control-btn">&#9654;</button>
        <button id="reload" class="control-btn">&#10227;</button>
      </div>
      <div id="url-bar">
        <input type="text" id="url-input" placeholder="Enter URL...">
        <button id="go">Go</button>
      </div>
    </div>
    <div id="tabs-bar">
      <div id="tabs-container"></div>
      <button id="new-tab">+</button>
    </div>
    <div id="content-container"></div>
  </div>
  <script>
    class Browser {
      constructor() {
        this.tabs = [];
        this.activeTabId = null;
        this.history = new Map();
        this.currentIndex = new Map();
        this.initElements();
        this.bindEvents();
        this.createTab();
      }
      initElements() {
        this.tabsContainer = document.getElementById('tabs-container');
        this.contentContainer = document.getElementById('content-container');
        this.urlInput = document.getElementById('url-input');
        this.backBtn = document.getElementById('back');
        this.forwardBtn = document.getElementById('forward');
        this.reloadBtn = document.getElementById('reload');
        this.goBtn = document.getElementById('go');
        this.newTabBtn = document.getElementById('new-tab');
      }
      bindEvents() {
        this.backBtn.addEventListener('click', () => this.goBack());
        this.forwardBtn.addEventListener('click', () => this.goForward());
        this.reloadBtn.addEventListener('click', () => this.reload());
        this.goBtn.addEventListener('click', () => this.navigate());
        this.newTabBtn.addEventListener('click', () => this.createTab());
        this.urlInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            this.navigate();
          }
        });
      }
      createTab() {
        if (this.tabs.length >= 5) return;
        const tabId = Date.now();
        this.tabs.push({ id: tabId, url: 'google.com' });
        this.history.set(tabId, ['google.com']);
        this.currentIndex.set(tabId, 0);
        this.renderTabs();
        this.setActiveTab(tabId);
      }
      setActiveTab(tabId) {
        this.activeTabId = tabId;
        const tab = this.tabs.find(t => t.id === tabId);
        this.urlInput.value = tab.url;
        this.renderTabs();
        this.renderContent();
      }
      renderTabs() {
        this.tabsContainer.innerHTML = this.tabs.map(tab => `
          <div class="tab ${tab.id === this.activeTabId ? 'active' : ''}" onclick="browser.setActiveTab(${tab.id})">
            ${tab.url}
          </div>`).join('');
      }
      renderContent() {
        this.contentContainer.innerHTML = `<embed src="https://x.linu.gq:9441/ns?u=https://${this.tabs.find(t => t.id === this.activeTabId).url}/">`;
      }
      navigate() {
        const url = this.urlInput.value.trim();
        const tab = this.tabs.find(t => t.id === this.activeTabId);
        tab.url = url;
        this.history.get(tab.id).push(url);
        this.currentIndex.set(tab.id, this.history.get(tab.id).length - 1);
        this.renderContent();
      }
      goBack() {
        const history = this.history.get(this.activeTabId);
        if (this.currentIndex.get(this.activeTabId) > 0) {
          this.currentIndex.set(this.activeTabId, this.currentIndex.get(this.activeTabId) - 1);
          this.renderContent();
        }
      }
      goForward() {
        const history = this.history.get(this.activeTabId);
        if (this.currentIndex.get(this.activeTabId) < history.length - 1) {
          this.currentIndex.set(this.activeTabId, this.currentIndex.get(this.activeTabId) + 1);
          this.renderContent();
        }
      }
    }
    const browser = new Browser();
  </script>
</body>
</html>
