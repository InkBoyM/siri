<!DOCTYPE html>
<html>
<head>
  <title>Browser Interface</title>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: Arial, sans-serif;
      background: var(--background-color, #f0f0f0);
      height: 100vh;
      display: flex;
      flex-direction: column;
      transition: background 0.3s, color 0.3s;
    }
    #browser {
      background: var(--theme-color, white);
      margin: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    #toolbar {
      padding: 10px;
      background: var(--theme-color-secondary, #f8f9fa);
      border-bottom: 1px solid #ddd;
      display: flex;
      gap: 10px;
    }
    #controls {
      display: flex;
      gap: 5px;
    }
    .control-btn {
      background: none;
      border: none;
      padding: 5px;
      cursor: pointer;
      border-radius: 4px;
      transition: background 0.3s;
    }
    .control-btn:hover {
      background: #e9ecef;
    }
    #url-bar {
      flex: 1;
      display: flex;
      gap: 5px;
    }
    #url-input {
      flex: 1;
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 20px;
      outline: none;
    }
    #tabs-bar {
      display: flex;
      background: var(--theme-color-secondary, #f8f9fa);
      padding: 5px 10px 0;
      border-bottom: 1px solid #ddd;
    }
    #tabs-container {
      display: flex;
      flex: 1;
      gap: 5px;
      overflow-x: auto;
      max-width: calc(100% - 40px);
    }
    .tab {
      display: flex;
      align-items: center;
      gap: 5px;
      padding: 8px 15px;
      background: var(--theme-color-secondary, #e9ecef);
      border: 1px solid #ddd;
      border-bottom: none;
      border-radius: 8px 8px 0 0;
      cursor: pointer;
      min-width: 100px;
      transition: background 0.3s;
    }
    .tab.active {
      background: var(--theme-color, white);
    }
    #content-container {
      flex: 1;
      position: relative;
      overflow: hidden;
    }
    .content {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: none;
    }
    .content.active {
      display: block;
    }
    embed {
      width: 100%;
      height: 100%;
      border: none;
    }
    .settings-page {
      padding: 20px;
      color: #333;
    }
    .settings-section {
      margin-bottom: 20px;
    }
    .color-picker {
      margin: 10px 0;
    }
    .dark-mode {
      --background-color: #121212;
      --theme-color: #1e1e1e;
      --theme-color-secondary: #2c2c2c;
      color: white;
    }
    .close-tab {
      cursor: pointer;
      color: red;
      margin-left: 10px;
    }
  </style>
</head>
<body>
  <div id="browser">
    <div id="toolbar">
      <div id="controls">
        <button id="back" class="control-btn">&#9664;</button>
        <button id="forward" class="control-btn">&#9654;</button>
        <button id="reload" class="control-btn">&#10227;</button>
        <button id="fullscreen" class="control-btn">⛶</button>
      </div>
      <div id="url-bar">
        <input type="text" id="url-input" placeholder="Enter URL...">
        <button id="go">Go</button>
      </div>
    </div>
    <div id="tabs-bar">
      <div id="tabs-container"></div>
      <button id="new-tab">+</button>
    </div>
    <div id="content-container"></div>
  </div>
  <script>
    class Browser {
      constructor() {
        this.tabs = [];
        this.activeTabId = null;
        this.history = new Map();
        this.currentIndex = new Map();
        this.settings = this.loadSettings();
        this.initElements();
        this.bindEvents();
        this.applyTheme();
        
        if (!localStorage.getItem('browserInitialized')) {
          localStorage.setItem('browserInitialized', 'true');
          this.createTab('ksf://settings');
        } else {
          this.createTab(this.settings.defaultNewTab);
        }
      }

      loadSettings() {
        const defaultSettings = {
          defaultNewTab: 'google.com',
          themeColor: '#ffffff',
          themeColorSecondary: '#f8f9fa',
          darkMode: false
        };
        return JSON.parse(localStorage.getItem('browserSettings')) || defaultSettings;
      }

      saveSettings() {
        localStorage.setItem('browserSettings', JSON.stringify(this.settings));
        this.applyTheme();
      }

      applyTheme() {
        document.documentElement.style.setProperty('--theme-color', this.settings.themeColor);
        document.documentElement.style.setProperty('--theme-color-secondary', this.settings.themeColorSecondary);
        document.body.classList.toggle('dark-mode', this.settings.darkMode);
      }

      initElements() {
        this.tabsContainer = document.getElementById('tabs-container');
        this.contentContainer = document.getElementById('content-container');
        this.urlInput = document.getElementById('url-input');
        this.backBtn = document.getElementById('back');
        this.forwardBtn = document.getElementById('forward');
        this.reloadBtn = document.getElementById('reload');
        this.fullscreenBtn = document.getElementById('fullscreen');
        this.goBtn = document.getElementById('go');
        this.newTabBtn = document.getElementById('new-tab');
      }

      bindEvents() {
        this.backBtn.addEventListener('click', () => this.goBack());
        this.forwardBtn.addEventListener('click', () => this.goForward());
        this.reloadBtn.addEventListener('click', () => this.reload());
        this.fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());
        this.goBtn.addEventListener('click', () => this.navigate());
        this.newTabBtn.addEventListener('click', () => this.createTab());
        this.urlInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            this.navigate();
          }
        });
      }

      createTab(initialUrl) {
        if (this.tabs.length >= 5) return;
        const tabId = Date.now();
        const url = initialUrl || this.settings.defaultNewTab;
        this.tabs.push({ id: tabId, url: url });
        this.history.set(tabId, [url]);
        this.currentIndex.set(tabId, 0);
        this.renderTabs();
        this.setActiveTab(tabId);
      }

      setActiveTab(tabId) {
        this.activeTabId = tabId;
        const tab = this.tabs.find(t => t.id === tabId);
        this.urlInput.value = tab.url;
        this.renderTabs();
        this.renderContent();
      }

      renderTabs() {
        this.tabsContainer.innerHTML = this.tabs.map(tab => `
          <div class="tab ${tab.id === this.activeTabId ? 'active' : ''}" onclick="browser.setActiveTab(${tab.id})">
            ${tab.url}
            <span class="close-tab" onclick="event.stopPropagation(); browser.closeTab(${tab.id})">✖</span>
          </div>`).join('');
      }

      renderContent() {
        const tab = this.tabs.find(t => t.id === this.activeTabId);
        if (tab.url === 'ksf://settings') {
          this.renderSettings();
        } else {
          this.contentContainer.innerHTML = `<embed src="https://x.linu.gq:9441/ns?u=https://${tab.url}/">`;
        }
      }

      renderSettings() {
        this.contentContainer.innerHTML = `
          <div class="settings-page">
            <h2>Browser Settings</h2>
            
            <div class="settings-section">
              <h3>Default New Tab Page</h3>
              <select id="default-tab" onchange="browser.updateDefaultTab(this.value)">
                <option value="google.com" ${this.settings.defaultNewTab === 'google.com' ? 'selected' : ''}>Google</option>
                <option value="bing.com" ${this.settings.defaultNewTab === 'bing.com' ? 'selected' : ''}>Bing</option>
                <option value="custom" ${!['google.com', 'bing.com'].includes(this.settings.defaultNewTab) ? 'selected' : ''}>Custom</option>
              </select>
              <input type="text" id="custom-url" 
                placeholder="Enter custom URL" 
                value="${!['google.com', 'bing.com'].includes(this.settings.defaultNewTab) ? this.settings.defaultNewTab : ''}"
                onchange="browser.updateCustomUrl(this.value)"
                style="margin-left: 10px;">
            </div>

            <div class="settings-section">
              <h3>Theme Colors</h3>
              <div class="color-picker">
                <label>Main Theme Color:</label>
                <input type="color" value="${this.settings.themeColor}" 
                  onchange="browser.updateThemeColor(this.value)">
              </div>
              <div class="color-picker">
                <label>Secondary Theme Color:</label>
                <input type="color" value="${this.settings.themeColorSecondary}" 
                  onchange="browser.updateThemeColorSecondary(this.value)">
              </div>
            </div>

            <div class="settings-section">
              <h3>Dark Mode</h3>
              <label>
                <input type="checkbox" id="dark-mode-toggle" ${this.settings.darkMode ? 'checked' : ''} onchange="browser.toggleDarkMode(this.checked)">
                Enable Dark Mode
              </label>
            </div>
          </div>`;
      }

      toggleDarkMode(isEnabled) {
        this.settings.darkMode = isEnabled;
        this.saveSettings();
      }

      closeTab(tabId) {
        this.tabs = this.tabs.filter(tab => tab.id !== tabId);
        if (this.activeTabId === tabId) {
          this.activeTabId = this.tabs.length ? this.tabs[this.tabs.length - 1].id : null;
        }
        this.renderTabs();
        this.renderContent();
      }

      updateDefaultTab(value) {
        if (value === 'custom') {
          const customUrl = document.getElementById('custom-url').value;
          if (customUrl) {
            this.settings.defaultNewTab = customUrl;
          }
        } else {
          this.settings.defaultNewTab = value;
        }
        this.saveSettings();
      }

      updateCustomUrl(value) {
        if (document.getElementById('default-tab').value === 'custom') {
          this.settings.defaultNewTab = value;
          this.saveSettings();
        }
      }

      updateThemeColor(color) {
        this.settings.themeColor = color;
        this.saveSettings();
      }

      updateThemeColorSecondary(color) {
        this.settings.themeColorSecondary = color;
        this.saveSettings();
      }

      navigate() {
        const url = this.urlInput.value.trim();
        const tab = this.tabs.find(t => t.id === this.activeTabId);
        tab.url = url;
        this.history.get(tab.id).push(url);
        this.currentIndex.set(tab.id, this.history.get(tab.id).length - 1);
        this.renderContent();
      }

      goBack() {
        const history = this.history.get(this.activeTabId);
        if (this.currentIndex.get(this.activeTabId) > 0) {
          this.currentIndex.set(this.activeTabId, this.currentIndex.get(this.activeTabId) - 1);
          this.renderContent();
        }
      }

      goForward() {
        const history = this.history.get(this.activeTabId);
        if (this.currentIndex.get(this.activeTabId) < history.length - 1) {
          this.currentIndex.set(this.activeTabId, this.currentIndex.get(this.activeTabId) + 1);
          this.renderContent();
        }
      }

      reload() {
        this.renderContent();
      }

      toggleFullscreen() {
        const embed = this.contentContainer.querySelector('embed');
        if (embed) {
          if (!document.fullscreenElement) {
            embed.requestFullscreen().catch(err => {
              console.log(`Error attempting to enable fullscreen: ${err.message}`);
            });
          } else {
            document.exitFullscreen();
          }
        }
      }
    }
    const browser = new Browser();
  </script>
</body>
</html>
